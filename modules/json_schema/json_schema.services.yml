services:

  # References should be converted to other schemata resources for the type.
  # This priority ensures the DataReferenceDefinition is handled before
  # DataDefinition. Since it is orthagonal to ComplexDataDefinition, they share
  # the same priority.
  serializer.normalizer.data_reference_definition.json_schema:
    class: Drupal\json_schema\Normalizer\DataReferenceDefinitionNormalizer
    arguments: ['@entity_type.manager']
    tags:
      - { name: normalizer, priority: 25 }

  # Normalize complex data properties.
  # This priority ensures the ComplexDataDefinition is handled before
  # DataDefinition. Since it is orthagonal to DataReferenceDefinition, they
  # share the same priority.
  serializer.normalizer.complex_data_definition.json_schema:
    class: Drupal\json_schema\Normalizer\ComplexDataDefinitionNormalizer
    tags:
      - { name: normalizer, priority: 20 }

  # Field definitions are a variant of List definitions, with additional access
  # to the particular schema and configuration pieces from the field system. As
  # a subclass of ListDataDefinitionInterface, FieldDefinitionInterface needs a
  # higher priority.
  serializer.normalizer.field_definition.json_schema:
    class: Drupal\json_schema\Normalizer\FieldDefinitionNormalizer
    tags:
      - { name: normalizer, priority: 30 }

  # If the typed data definition is a list (as most are somewhere along the
  # property hierarchy) this triggers the recursion to the next layer.
  serializer.normalizer.list_data_definition.json_schema:
    class: Drupal\json_schema\Normalizer\ListDataDefinitionNormalizer
    tags:
      - { name: normalizer, priority: 20 }

  # Typed data definitions in general can take many forms. This handles final items.
  serializer.normalizer.data_definition.json_schema:
    class: Drupal\json_schema\Normalizer\DataDefinitionNormalizer
    tags:
      - { name: normalizer, priority: 10 }

  # This is the main JSON Schema normalizer.
  serializer.normalizer.schema.json_schema:
    class: Drupal\json_schema\Normalizer\SchemataSchemaNormalizer
    arguments: ['@router.route_provider']
    tags:
      - { name: normalizer, priority: 10 }

  serializer.encoder.json_schema:
    class: Drupal\json_schema\Encoder\JsonEncoder
    tags:
      - { name: encoder, priority: 10, format: json_schema }

  plugin.manager.json_schema.type_mapper:
    class: Drupal\json_schema\Plugin\Type\TypeMapperPluginManager
    arguments: ['@container.namespaces', '@module_handler']
